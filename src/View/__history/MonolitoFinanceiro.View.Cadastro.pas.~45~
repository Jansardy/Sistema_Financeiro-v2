unit MonolitoFinanceiro.View.Cadastro;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Data.DB, Vcl.StdCtrls,
  Vcl.Grids, Vcl.DBGrids, System.ImageList, Vcl.ImgList, Vcl.WinXPanels,
  Vcl.Menus;

type
  TfrmCadastro = class(TForm)
    listImaPnl: TImageList;
    PnlPrincipal: TCardPanel;
    CardCadastro: TCard;
    CardPesquisa: TCard;
    PnlPesquisa: TPanel;
    PnlPesquisaBotoes: TPanel;
    PnlGrid: TPanel;
    DBGrid1: TDBGrid;
    edtPesquisar: TEdit;
    lblPesquisar: TLabel;
    btnPesquisar: TButton;
    btnFechar: TButton;
    btnIncluir: TButton;
    btnAlterar: TButton;
    btnExcluir: TButton;
    btnImprimir: TButton;
    Panel1: TPanel;
    btnCancelar: TButton;
    btnSalvar: TButton;
    DataSource2: TDataSource;
    procedure btnIncluirClick(Sender: TObject);
    procedure btnAlterarClick(Sender: TObject);
    procedure btnFecharClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btnPesquisarClick(Sender: TObject);
    procedure btnSalvarClick(Sender: TObject);
    procedure btnExcluirClick(Sender: TObject);
  private
    { Private declarations }
    procedure HabilitarBotoes;
    procedure LimparCampos;
  public
    { Public declarations }
  protected
    procedure Pesquisar; virtual;
  end;

var
  frmCadastro: TfrmCadastro;

implementation

uses
  Datasnap.DBClient, Vcl.WinXCtrls;

{$R *.dfm}

procedure TfrmCadastro.btnAlterarClick(Sender: TObject);
begin
  TClientDataSet(DataSource2.DataSet).Edit;
  PnlPrincipal.ActiveCard := CardCadastro;
end;

procedure TfrmCadastro.btnCancelarClick(Sender: TObject);
begin
  TClientDataSet(DataSource2.DataSet).Cancel;
  PnlPrincipal.ActiveCard := CardPesquisa;
end;

procedure TfrmCadastro.btnExcluirClick(Sender: TObject);
begin
  if Application.MessageBox('Deseja realmente excluir o registro?', 'Pergunta', MB_YESNO + MB_ICONQUESTION) <> mrYes then
    exit;

  try
    TClientDataSet(DataSource2.DataSet).Delete;
    TClientDataSet(DataSource2.DataSet).ApplyUpdates(0);
    Application.MessageBox('Registro excluido com sucesso!', 'Atenção', MB_OK + MB_ICONINFORMATION);
    Pesquisar;
  except on E : Exception do
    Application.MessageBox(PWideChar(E.Message), 'Erro ao excluir registro', MB_OK + MB_ICONERROR);
  end;
end;

procedure TfrmCadastro.btnFecharClick(Sender: TObject);
begin
  Close;
end;

procedure TfrmCadastro.btnIncluirClick(Sender: TObject);
begin
  LimparCampos;
  PnlPrincipal.ActiveCard := CardCadastro;
  TClientDataSet(DataSource2.DataSet).Insert;
end;


procedure TfrmCadastro.btnPesquisarClick(Sender: TObject);
begin
  Pesquisar;
end;

procedure TfrmCadastro.btnSalvarClick(Sender: TObject);
var
  Mensagem : string;
begin
  Mensagem := 'Registro alterado com sucesso!';

  if DataSource2.State in [dsInsert] then
    Mensagem := 'Registro incluido com sucesso!';


  TClientDataSet(DataSource2.DataSet).Post;
  TClientDataSet(DataSource2.DataSet).ApplyUpdates(0);
  Application.MessageBox(PWideChar(Mensagem), 'Atenção', MB_OK + MB_ICONINFORMATION);

  Pesquisar;
  PnlPrincipal.ActiveCard := cardPesquisa;
end;

procedure TfrmCadastro.FormShow(Sender: TObject);
begin
  PnlPrincipal.ActiveCard := CardPesquisa;
  Pesquisar;
end;

procedure TfrmCadastro.HabilitarBotoes;
begin
  btnExcluir.Enabled := not DataSource2.DataSet.IsEmpty;
  btnAlterar.Enabled := not DataSource2.DataSet.IsEmpty;
end;

procedure TfrmCadastro.LimparCampos;
var
  Contador : Integer;
begin
  for Contador := 0 to Pred(ComponentCount) do
  begin
    if Components[Contador] is TCustomEdit then
      TCustomEdit(Components[Contador]).Clear
    else if Components[Contador] is TToggleSwitch then
      TToggleSwitch(Components[Contador]).State	:= tssOn;
  end;
end;

procedure TfrmCadastro.Pesquisar;
begin
  HabilitarBotoes;
end;

end.
