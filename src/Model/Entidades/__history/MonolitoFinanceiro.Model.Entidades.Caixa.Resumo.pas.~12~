unit MonolitoFinanceiro.Model.Entidades.Caixa.Resumo;

interface

uses
  MonolitoFinanceiro.Model.Caixa;

type
  TModelResumoCaixa = class
    private
    FTotalSaidas: Currency;
    FTotalEntradas: Currency;
    FSaldoInicial: Currency;
    procedure SetSaldoInicial(const Value: Currency);
    procedure SetTotalEntradas(const Value: Currency);
    procedure SetTotalSaidas(const Value: Currency);
    public
      property SaldoInicial : Currency read FSaldoInicial write SetSaldoInicial;
      property TotalEntradas : Currency read FTotalEntradas write SetTotalEntradas;
      property TotalSaidas : Currency read FTotalSaidas write SetTotalSaidas;
      function SaldoParcial : Currency;
      function SaldoFinal : Currency;
      function ResumoCaixaa(DataInicial, DataFinal : TDate) : TdmCaixa;
  end;
implementation
uses
  MonolitoFinanceiro.Model.Entidades.Caixa.Resumo;

{ TModelResumoCaixa }

function TModelResumoCaixa.ResumoCaixaa(DataInicial,
  DataFinal: TDate): TdmCaixa;
begin
  if DataInicial > DataFinal then
    raise Exception.Create('Período Inválido');

  Result := TModelResumoCaixa.Create;
  try
    Result.SaldoInicial := GetSaldoAnteriorCaixa(DataInicial);
    Result.TotalEntradas := GetTotalEntradasCaixa(DataInicial, DataFinal);
    Result.TotalSaidas := GetTotalSaidasCaixa(DataInicial, DataFinal);
  except
    Result.Free;
    raise;
  end;

end;

function TModelResumoCaixa.SaldoFinal: Currency;
begin
  Result := FSaldoInicial + SaldoInicial;
end;

function TModelResumoCaixa.SaldoParcial: Currency;
begin
  Result := FTotalEntradas - FTotalSaidas;
end;

procedure TModelResumoCaixa.SetSaldoInicial(const Value: Currency);
begin
  FSaldoInicial := Value;
end;

procedure TModelResumoCaixa.SetTotalEntradas(const Value: Currency);
begin
  FTotalEntradas := Value;
end;

procedure TModelResumoCaixa.SetTotalSaidas(const Value: Currency);
begin
  FTotalSaidas := Value;
end;


end.
